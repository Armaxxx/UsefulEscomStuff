#include <string.h>
#include <stdio.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <unistd.h>

#define SERV_PORT 49312
#define MAXLINE   1024

char *BanderadeFin = "================END";

int main(int argc, char **argv)
{
    int s, n, archivo;
    struct sockaddr_in servaddr;
    char buf[MAXLINE];
    char *destino, *origen;

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(SERV_PORT);
    inet_pton(AF_INET, argv[1], &servaddr.sin_addr);

    s = socket(AF_INET, SOCK_DGRAM, 0);

    origen = argv[2];
    destino = argv[3];
    sendto(s, destino, strlen(destino), 0, (struct sockaddr *) &servaddr, sizeof(servaddr));
    n = recvfrom(s, buf, MAXLINE, 0, NULL, NULL);
    if (!strncmp(buf, "ok", 2)) {
        printf("Filename sent.\n");
    }
    
    archivo = open(origen, O_RDONLY);
    while ((n = read(archivo, buf, MAXLINE)) > 0) {
        sendto(s, buf, n, 0, (struct sockaddr *) &servaddr, sizeof(servaddr));
    }
    sendto(s, BanderadeFin, strlen(BanderadeFin), 0, (struct sockaddr *) &servaddr, sizeof(servaddr));
    
    return 0;
}
*******************************************************************************************************************
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <unistd.h>
  
#define SERV_PORT 49312
#define MAXLINE   1024
  
char *BanderaFin = "================END";

void run(int s, struct sockaddr *direccionCliente, socklen_t clilen)
{
    int n, Archivo;
    socklen_t len;
    char buf[MAXLINE];

    len = clilen;
    n = recvfrom(s, buf, MAXLINE, 0, direccionCliente, &len);
    buf[n] = 0;
    printf("Received from client: [%s]\n", buf);
    sendto(s, "ok", strlen("ok"), 0, direccionCliente, len);
    Archivo = open(buf, O_RDWR | O_CREAT, 0666);

    while ((n = recvfrom(s, buf, MAXLINE, 0, direccionCliente, &len))) {
        buf[n] = 0;
        printf("%s", buf);
        if (!(strcmp(buf, BanderaFin))) {
            break;
        }
        write(Archivo, buf, n);
    }
    close(Archivo);
}
         
int main(int argc, char **argv)
{
    int s;
    struct sockaddr_in servaddr, direccionCliente;

    s = socket(AF_INET, SOCK_DGRAM, 0);
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(SERV_PORT);

    bind(s, (struct sockaddr *) &servaddr, sizeof(servaddr));

    run(s, (struct sockaddr *) &direccionCliente, sizeof(direccionCliente));

    return 0;
}
*****************************************************************************************************
all: cliente servidor
cliente: client.c
	gcc client.c -o cliente
servidor: server.c
	gcc server.c -o servidor
clean:
	rm servidor cliente
***************************************************************************************************************
#include <iostream>
#include <string.h>
#include "PaqueteDatagrama.hpp"
using namespace std;

PaqueteDatagrama::PaqueteDatagrama(char *dat, unsigned int len, char *addr , int port):longitud(len),puerto(port){
    datos = (char*)malloc(sizeof(dat[0])*len);
    memcpy(datos,dat,len);
    strcpy(ip,addr);
    cout << "\tMensaje creado para:\n\t\tip: " << ip << ":" << puerto << endl;
}
PaqueteDatagrama::PaqueteDatagrama(unsigned int len):longitud(len){
    datos = (char *)malloc(len*sizeof(char));
}

char *PaqueteDatagrama::obtieneDireccion(){
    return ip;
}

unsigned int PaqueteDatagrama::obtieneLongitud(){
    return longitud;
}

int PaqueteDatagrama::obtienePuerto(){
    return puerto;
}

char *PaqueteDatagrama::obtieneDatos(){
    return datos;
}

void PaqueteDatagrama::inicializaDatos(char *data){
    memcpy(datos,data,longitud);
}

void PaqueteDatagrama::inicializaIp(char *addr){
    strcpy(ip,addr);
}

void PaqueteDatagrama::inicializaPuerto(int port){
    puerto = port;
}
******************************************************************************************
#ifndef PAQUETEDATAGRAMA_HPP_
#define PAQUETEDATAGRAMA_HPP_

class PaqueteDatagrama{
    private:
        char *datos;            //Almacena los datos
        char ip[16];            //Almacena la IP
        unsigned int longitud;  //Almacena la longitud
        int puerto;             //Almacena el puerto 
    public:
        PaqueteDatagrama(char *, unsigned int, char *, int );
        PaqueteDatagrama(unsigned int );
        char *obtieneDireccion();
        unsigned int obtieneLongitud();
        int obtienePuerto();
        char *obtieneDatos();
        void inicializaPuerto(int);
        void inicializaIp(char *);
        void inicializaDatos(char *);
};
#endif
*****************************************************************************************************
#include "PaqueteDatagrama.hpp"
#include "SocketDatagrama.hpp"
#include <strings.h>
#include <iostream>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
using namespace std;

SocketDatagrama::SocketDatagrama(int puerto){
    cout << "\tCreando Socket\n";
    s = socket(AF_INET, SOCK_DGRAM, 0);
    cout << "\tSocket Creado\n";

    cout << "\tInicializa Direccion Local\n";
    bzero((char *) &direccionLocal, sizeof(direccionLocal));
    direccionLocal.sin_family = AF_INET;
    direccionLocal.sin_addr.s_addr = INADDR_ANY;
    direccionLocal.sin_port = htons(puerto);
    cout << "\tDireccion Local creada con:\n\t\tip: " << inet_ntoa(direccionLocal.sin_addr) << "\n\t\tpuerto: " << ntohs(direccionLocal.sin_port) << endl;

    cout << "\tUniendo socket a direccion local\n";
    bind(s, (struct sockaddr *) &direccionLocal, sizeof(direccionLocal));
    cout << "\tUnidos\n";
}

int SocketDatagrama::recibe(PaqueteDatagrama &p){
    char *num;
    int i = 0;
    while(i == 0) {
        unsigned int tam = sizeof(direccionForanea);
        cout << "\tEsperando mensaje de size: " << p.obtieneLongitud() << endl;
        i = recvfrom(s, (char*)p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *)&direccionForanea, &tam);
        p.inicializaIp(inet_ntoa(direccionForanea.sin_addr));
        p.inicializaPuerto(ntohs(direccionForanea.sin_port));
        cout << "\trecvfrom: " << i << "\n\tEnviado Por: " << inet_ntoa(direccionForanea.sin_addr) << ":"<< ntohs(direccionForanea.sin_port) << endl;
    }
    return i;
}

int SocketDatagrama::envia(PaqueteDatagrama &p){
    int i;
    direccionForanea.sin_family = AF_INET;
    direccionForanea.sin_addr.s_addr = inet_addr(p.obtieneDireccion());
    direccionForanea.sin_port = htons(p.obtienePuerto());
    cout << "\tEnviando mensaje a:\n\t\tip: " << inet_ntoa(direccionForanea.sin_addr) << "\n\t\tpuerto: " << ntohs(direccionForanea.sin_port) << endl;
    unsigned int tam = sizeof(direccionForanea);
    cout << "\tEnviando\n";
    i = sendto(s, p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *)&direccionForanea, tam);
    cout << "\tEnviado\n\tsendto: " << i << endl;
    return i;
}
*******************************************************************************************************************************************************************
#include <netinet/in.h>
#include "PaqueteDatagrama.hpp"
#ifndef SOCKETDATAGRAMA_HPP_
#define SOCKETDATAGRAMA_HPP_

class SocketDatagrama{
private:
    struct sockaddr_in direccionLocal;
    struct sockaddr_in direccionForanea;
    int s; //ID socket
public:
    SocketDatagrama(int);
    //Recibe un paquete tipo datagrama proveniente de este socket
    int recibe(PaqueteDatagrama &p);
    //Envia un paquete tipo datagrama desde este socket
    int envia (PaqueteDatagrama &p);
};
#endif
***********************************************************************************************************************
